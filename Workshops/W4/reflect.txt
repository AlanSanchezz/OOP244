After completing this workshop, I took some time to review everything I implemented, especially the operator overloads and how they interact with the state of the Account class. One of the key takeaways for me was the importance of correctly checking and maintaining object states — like recognizing when an account is new, valid, or invalid — and how those conditions affect the logic inside each overloaded operator. For example, I realized that checking *this in operator= (int) caused the new account to fail validation, and fixing that helped me better understand how custom boolean conversion works.

I also gained a deeper understanding of when to use member functions versus friend functions, especially for binary operators that need to modify both operands (like << and >> for fund transfers). Implementing postfix and prefix increment/decrement was a good exercise in object copying and returning references. Overall, the lab helped reinforce OOP principles like encapsulation, operator overloading, and proper class design. I feel more confident now in writing safe, reusable C++ code.
