During this workshop, I learned how constructors work in C++, especially the no-argument constructor and how it can be used to initialize objects to a "safe empty state." I also understood the importance of validation when assigning values to a class’s data members, and how we can use `set` functions to control that. Another key learning was how to handle dynamic memory allocation for strings, and how helper functions like `strcpy` and `strlen` (custom versions in this case) are essential for managing C-style strings properly within a class.

One difficulty I encountered was getting the program to compile due to undefined symbols related to the `strcpy` and `strlen` functions. It took some time to realize that the issue was because I forgot to include the `cstr.cpp` file during compilation. Once I added that, the program ran as expected. It was a helpful reminder that linking issues are as important as writing correct code.

My only suggestion would be to briefly go over common compiler and linker errors in class. Sometimes these can be confusing for beginners, and even just a few examples could save a lot of time. Overall, I enjoyed the hands-on nature of the workshop—it helped solidify my understanding of classes, constructors, and basic string handling in C++.
